// Date: 2023-9-25
// Author: Generated by GoCodeo.

const { asNumber } = require("../../../src/func/colour");
const { applyStyle } = require("../../../src/func/style");

describe("applyStyle", () => {
    // Positive test case: applying style to a single embed
    it("should apply brand style to a single embed", () => {
        const embed = { title: "halfbot" };
        const brand = { colour: 0xffffff };

        const result = applyStyle(embed, brand);

        expect(result).toEqual({
            title: "halfbot",
            color: expect.any(Number)
        });
    });

    // Positive test case: applying style to an array of embeds
    it("should apply brand style to an array of embeds", () => {
        const embeds = [{ title: "halfbot" }, { title: "discord" }];
        const brand = { colour: 0xffffff };

        const result = applyStyle(embeds, brand);

        expect(result).toEqual([
            {
                title: "halfbot",
                color: expect.any(Number)
            },
            {
                title: "discord",
                color: expect.any(Number)
            }
        ]);
    });

    // Positive test case: applying style to an array of embeds with skipFooter option
    it("should apply brand style to an array of embeds with skipFooter option", () => {
        const embeds = [{ title: "halfbot" }, { title: "discord" }];
        const brand = {
            name: "brand",
            logoUrl: "https://example.com/logo.png"
        };

        const result = applyStyle(embeds, brand);

        expect(result).toEqual([
            {
                title: "halfbot"
            },
            {
                title: "discord",
                footer: {
                    text: "brand",
                    icon_url: "https://example.com/logo.png"
                }
            }
        ]);
    });

    // Negative test case: applying style to an invalid embed
    it("should not apply brand style to an invalid embed parameter", () => {
        const embed = null;
        const brand = { colour: 0xffffff };

        const result = applyStyle(embed, brand);
        expect(result).toBeUndefined();
    });

    // Edge test case: applying style to an empty array of embeds
    it("should return an empty array when applying style to an empty array of embeds", () => {
        const embeds = [];
        const brand = { colour: 0xffffff };

        const result = applyStyle(embeds, brand);

        expect(result).toEqual([]);
    });

    // Edge test case: applying style to an array of embeds with only one embed
    it("should apply brand style to an array of embeds with only one embed", () => {
        const embeds = [{ title: "halfbot" }];
        const brand = { colour: 0xffffff };

        const result = applyStyle(embeds, brand);

        expect(result).toEqual([
            {
                title: "halfbot",
                color: expect.any(Number)
            }
        ]);
    });

    // Edge test case: applying style to an array of embeds with skipFooter option and only one embed
    it("should apply brand style to an array of embeds with skipFooter option and only one embed", () => {
        const embeds = [{ title: "halfbot" }];
        const brand = {
            name: "brand",
            logoUrl: "https://example.com/logo.png"
        };

        const result = applyStyle(embeds, brand);

        expect(result).toEqual([
            {
                title: "halfbot",
                color: undefined,
                footer: {
                    text: "brand",
                    icon_url: "https://example.com/logo.png"
                }
            }
        ]);
    });

    // Edge test case: applying style to an array of embeds with skipFooter option and empty array
    it("should return an empty array when applying style to an array of embeds with skipFooter option and empty array", () => {
        const embeds = [];
        const brand = {
            name: "brand",
            logoUrl: "https://example.com/logo.png"
        };

        const result = applyStyle(embeds, brand);
        expect(result).toEqual([]);
    });
});
